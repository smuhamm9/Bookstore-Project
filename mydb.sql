
-- MySQL Script generated by MySQL Workbench
-- 12/14/16 21:27:56
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Customer` (
  `Customer Name` VARCHAR(45) NOT NULL,
  `Phone Number` INT NULL,
  `Email Address` VARCHAR(45) NULL,
  `Pass` VARCHAR(45) NOT NULL,
  `AccountID` INT NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`AccountID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Books`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Books` (
  `ISBN` INT(13) NOT NULL AUTO_INCREMENT,
  `Title` VARCHAR(45) NULL,
  `Author Name` VARCHAR(45) NULL,
  `Edition` INT(2) NULL,
  `Year` YEAR NULL,
  `Category` VARCHAR(45) NULL,
  `Publisher` VARCHAR(45) NULL,
  `Quantity` INT NULL,
  `Price` DOUBLE NULL,
  PRIMARY KEY (`ISBN`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Credit Card`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Credit Card` (
  `Card Number` INT NOT NULL AUTO_INCREMENT,
  `Name on Card` VARCHAR(45) NOT NULL,
  `Expiration Date` DATE NOT NULL,
  `Billing Address` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Card Number`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Orders` (
  `AccountID` INT NOT NULL,
  `Date` DATE NULL,
  `Order Status` VARCHAR(45) NULL,
  `Total Price` DOUBLE NULL,
  `Shipping Address` VARCHAR(45) NULL,
  `Billing Address` VARCHAR(45) NULL,
  `Credit Card` INT NULL,
  `Ordered Books` INT(13) NULL,
  `Order Number` INT NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`Order Number`),
  INDEX `AccountID_idx` (`AccountID` ASC),
  INDEX `Ordered Books_idx` (`Ordered Books` ASC),
  INDEX `Credit Card_idx` (`Credit Card` ASC),
  CONSTRAINT `AccountID`
    FOREIGN KEY (`AccountID`)
    REFERENCES `mydb`.`Customer` (`AccountID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Ordered Books`
    FOREIGN KEY (`Ordered Books`)
    REFERENCES `mydb`.`Books` (`ISBN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Credit Card`
    FOREIGN KEY (`Credit Card`)
    REFERENCES `mydb`.`Credit Card` (`Card Number`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Cart`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Cart` (
  `Account ID` INT NOT NULL,
  `Cart ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL,
  `Date Created` DATE NULL,
  `Date Updated` DATE NULL,
  `Books In Cart` INT(13) NULL,
  PRIMARY KEY (`Cart ID`),
  INDEX `Account ID_idx` (`Account ID` ASC),
  INDEX `Books In Cart_idx` (`Books In Cart` ASC),
  CONSTRAINT `Account ID`
    FOREIGN KEY (`Account ID`)
    REFERENCES `mydb`.`Customer` (`AccountID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Books In Cart`
    FOREIGN KEY (`Books In Cart`)
    REFERENCES `mydb`.`Books` (`ISBN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Employee`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Employee` (
  `EmployeeID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL,
  `Address` VARCHAR(45) NULL,
  `Salary` DOUBLE NULL,
  `Position` VARCHAR(45) NULL,
  PRIMARY KEY (`EmployeeID`))
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


#define a stored procedure to populate the Customer table
DELIMITER $$
CREATE PROCEDURE populate_customer()
BEGIN
	DECLARE i INT DEFAULT 1;
    WHILE i < 6 DO
	INSERT INTO Customer (`Customer Name`, `Phone Number`, `Email Address`, Pass) VALUES ('CustName', 555, 'email@email.com', 'pass');
	SET i = i + 1;
	END WHILE;
END$$
DELIMITER ;

#execute the stored procedure to populate the customer table
call populate_customer();

#define a stored procedure to populate the Books table
DELIMITER $$
CREATE PROCEDURE populate_books()
BEGIN
	DECLARE i INT DEFAULT 1;
    WHILE i < 6 DO
	INSERT INTO Books (Title, `Author Name`, Edition, Year, Category, Publisher, Quantity, Price) VALUES ('Book Title', 'Author', 1, 2016, 'Fiction', 'A Publisher', 4, 19.99);
	SET i = i + 1;
	END WHILE;
    WHILE i < 10 DO
    INSERT INTO Books (Title, `Author Name`, Edition, Year, Category, Publisher, Quantity, Price) VALUES ('Another Title', 'Another Author', 2, 2012, 'Non-Fiction', 'Some Publisher', 1, 22.99);
	SET i = i + 1;
	END WHILE;
END$$
DELIMITER ;

#execute the stored procedure to populate the Books table
call populate_books();


#define a stored procedure to populate the Orders table
DELIMITER $$
CREATE PROCEDURE populate_orders()
BEGIN
	DECLARE i INT DEFAULT 1;
    WHILE i < 6 DO
	INSERT INTO Orders (Date, `Order Status`, `Total Price`, `Credit Card`, `Ordered Books`, AccountID) VALUES (CURRENT_DATE(), 'Shipped', 12.99, 1, 0000000000001, i);
	SET i = i + 1;
	END WHILE;
END$$
DELIMITER ;

#execute the stored procedure to populate the orders table
call populate_orders();


#define a stored procedure to populate the Cart table
DELIMITER $$
CREATE PROCEDURE populate_cart()
BEGIN
	DECLARE i INT DEFAULT 1;
    WHILE i < 6 DO
	INSERT INTO Cart (Name, `Books In Cart`, `Account ID`) VALUES ('John', 0000000000001, i);
	SET i = i + 1;
	END WHILE;
END$$
DELIMITER ;

#execute the stored procedure to populate the cart table
call populate_cart();


#define a stored procedure to populate the Employee table
DELIMITER $$
CREATE PROCEDURE populate_employee()
BEGIN
	DECLARE i INT DEFAULT 1;
    WHILE i < 6 DO
	INSERT INTO Employee (Name, Salary) VALUES ('Kevin', 9.50);
	SET i = i + 1;
	END WHILE;
END$$
DELIMITER ;

#execute the stored procedure to populate the employee table
call populate_employee();

#define a stored procedure to populate the Credit Card table
DELIMITER $$
CREATE PROCEDURE populate_creditcard()
BEGIN
	DECLARE i INT DEFAULT 1;
    WHILE i < 6 DO
	INSERT INTO `Credit Card` (`Name on Card`, `Expiration Date`, `Billing Address`) VALUES ('Karen', '2019-12-18', '1814 Charlotte Road');
	SET i = i + 1;
	END WHILE;
END$$
DELIMITER ;

#execute the stored procedure to populate the customer table
call populate_creditcard();


#Queries to perform the desired functions:

#The user functions to register for a new user account, to login as a user, to place an order,
#and to trace an order should be done with a different programming language
#The employee function to check all orders under a certain employee could not be completed with MySQL

#User Functions:

#To update password:
UPDATE Customer SET Pass='newpasss' WHERE Customer.AccountID=1;

#Book Searches:
SELECT * FROM Books WHERE Title='Book Title';
SELECT * FROM Books WHERE `Author Name`='Another Author';
SELECT * FROM Books WHERE Category='Non-Fiction';
SELECT * FROM Books WHERE Year=2016;
SELECT * FROM Books WHERE `Author Name` = 'Another Author' AND Title='Another Title';
SELECT * FROM Books WHERE Category='Fiction' AND Year='2016';

#Create new empty order or shopping cart:
INSERT INTO Orders(AccountID, Date) VALUES (10, CURRENT_DATE());
INSERT INTO Cart(`Account ID`, `Date Created`) VALUES (13, CURRENT_DATE());

#Add books to shopping cart:
INSERT INTO Cart(`Account ID`, `Books In Cart`, `Date Updated`) VALUES (17, 0001014528763, CURRENT_DATE());

#Delete book from shopping cart:
DELETE FROM Cart WHERE `Account ID`=17 AND `Books In Cart` =  0001014528763;

#Merge shopping cart:
SELECT `Account ID`, group_concat(`Books In Cart`) AS BooksInCart FROM Cart GROUP BY `Account ID`;

#Change carts to orders:
INSERT INTO Orders (AccountID, `Ordered Books`) SELECT `Account ID`, `Books In Cart` FROM Cart WHERE `Cart ID`=1;
DELETE FROM Cart WHERE `Cart ID`=1;


#For Employees:

#List book info of chosen books:
SELECT * FROM BOOKS WHERE Year=2016;
SELECT * FROM BOOKS WHERE Title='Another Title';
SELECT * FROM BOOKS WHERE Quantity >= 1;

#Update Order Status:
UPDATE Orders SET `Order Status`='Delivered' WHERE `Order Number`=1;

#Insert new books:
INSERT INTO Books (Title, `Author Name`, Year, Category, Publisher, Quantity, Price, ISBN) 
VALUES ('Added Book', 'New Author', '2015', 'Fiction', 'Another Publisher', 12, 16.99, 0000001000101);
